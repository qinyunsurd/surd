<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gulang.surd.dao.UserDao">
    <!-- 设置数据库与实体类对应-->
    <resultMap id="BaseResultMap" type="com.gulang.surd.entity.UserDO">
        <result column="user_id" property="userId" jdbcType="CHAR"/>
        <result column="mobile" property="mobile" jdbcType="CHAR"/>
        <result column="user_name" property="userName" jdbcType="CHAR"/>
        <result column="email" property="email" jdbcType="CHAR"/>
        <result column="app_domain" property="appDomain" jdbcType="VARCHAR"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="mod_date" property="modDate" jdbcType="TIMESTAMP"/>
        <result column="is_del" property="isDel" jdbcType="TINYINT"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="row_version" property="rowVersion" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="joinTables">
    </sql>


    <sql id="fullColumn">
         user_id,mobile,user_name,email,app_domain,create_date,mod_date,is_del,status,row_version
    </sql>

    <sql id="smallWhereCase">
        <where>
            <if test="userId != null">AND user_id=#{userId}</if>
        </where>
    </sql>

    <sql id="whereCase">
        <where>
            <if test="userId != null">AND user_id=#{userId}</if>
            <if test="mobile != null">AND mobile=#{mobile}</if>
            <if test="userName != null">AND user_name=#{userName}</if>
            <if test="email != null">AND email=#{email}</if>
        </where>
    </sql>


    <!-- 获取一条记录-->
    <select id="getObjectByEntity" resultMap="BaseResultMap">
        SELECT
        <include refid="fullColumn"/>
        FROM user_info
        <include refid="joinTables"/>
        <include refid="whereCase"/>
    </select>
    <!--保存一条记录 -->
    <insert id="saveObject" parameterType="com.gulang.surd.entity.UserDO">
        INSERT INTO user_info (<include refid="fullColumn"/>)
        VALUES (
        #{userId}
        ,#{mobile}
        ,#{userName}
        ,#{email}
        ,#{appDomain}
        ,now()
        ,now()
        ,0
        ,0
        ,0
        )
    </insert>
    <!--批量添加 -->
    <insert id="insertBatch" parameterType="com.gulang.surd.entity.UserDO">
        INSERT INTO user_info
        (<include refid="fullColumn"/>)
        VALUES
        <foreach collection="list" item="record" index="index" separator=",">
            (
            #{record.userId}
            ,#{record.mobile}
            ,#{record.userName}
            ,#{record.email}
            ,#{record.appDomain}
            ,now()
            ,now()
            ,0
            ,0
            ,0
            )
        </foreach>
    </insert>


    <!--物理删除一条记录,项目开发中,一般进行逻辑删除,而非此物理删除-->
    <delete id="removeObject">
        DELETE FROM user_info
        <include refid="whereCase"/>
    </delete>

    <!--更新一条记录 -->
    <update id="updateObject" parameterType="com.gulang.surd.entity.UserDO">
        UPDATE user_info
        <set>
            <if test="mobile != null">
                mobile = #{mobile},
            </if>
            <if test="userName != null">
                user_name = #{userName},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="appDomain != null">
                app_domain = #{appDomain},
            </if>
            <if test="createDate != null">
                create_date = #{createDate},
            </if>
            <if test="modDate != null">
                mod_date = #{modDate},
            </if>
            <if test="isDel != null">
                is_del = #{isDel},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="rowVersion != null">
                row_version = #{rowVersion}
            </if>
        </set>
        <include refid="smallWhereCase"/>
    </update>


</mapper>